import * as tslib_1 from "tslib";
import { Directive, forwardRef, Input } from "@angular/core";
import { NG_VALIDATORS } from "@angular/forms";
import { UniversalValidators } from "./universal-validators";
var WhiteSpaceValidatorDirective = /** @class */ (function () {
    function WhiteSpaceValidatorDirective() {
    }
    WhiteSpaceValidatorDirective_1 = WhiteSpaceValidatorDirective;
    WhiteSpaceValidatorDirective.prototype.ngOnInit = function () {
        this.validator = UniversalValidators.noWhitespace;
    };
    WhiteSpaceValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    var WhiteSpaceValidatorDirective_1;
    WhiteSpaceValidatorDirective = WhiteSpaceValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "[noWhitespace][formControlName],[noWhitespace][formControl],[noWhitespace][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return WhiteSpaceValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], WhiteSpaceValidatorDirective);
    return WhiteSpaceValidatorDirective;
}());
export { WhiteSpaceValidatorDirective };
var EmptyStringValidatorDirective = /** @class */ (function () {
    function EmptyStringValidatorDirective() {
    }
    EmptyStringValidatorDirective_1 = EmptyStringValidatorDirective;
    EmptyStringValidatorDirective.prototype.ngOnInit = function () {
        this.validator = UniversalValidators.noEmptyString;
    };
    EmptyStringValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    var EmptyStringValidatorDirective_1;
    EmptyStringValidatorDirective = EmptyStringValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "[noEmptyString][formControlName],[noEmptyString][formControl],[noEmptyString][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return EmptyStringValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], EmptyStringValidatorDirective);
    return EmptyStringValidatorDirective;
}());
export { EmptyStringValidatorDirective };
var IsNumberValidatorDirective = /** @class */ (function () {
    function IsNumberValidatorDirective() {
    }
    IsNumberValidatorDirective_1 = IsNumberValidatorDirective;
    IsNumberValidatorDirective.prototype.ngOnInit = function () {
        this.validator = UniversalValidators.isNumber;
    };
    IsNumberValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    var IsNumberValidatorDirective_1;
    IsNumberValidatorDirective = IsNumberValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return IsNumberValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], IsNumberValidatorDirective);
    return IsNumberValidatorDirective;
}());
export { IsNumberValidatorDirective };
var IsInRangeValidatorDirective = /** @class */ (function () {
    function IsInRangeValidatorDirective() {
    }
    IsInRangeValidatorDirective_1 = IsInRangeValidatorDirective;
    IsInRangeValidatorDirective.prototype.ngOnInit = function () {
        this.validator = UniversalValidators.isInRange(this.minValue, this.maxValue);
    };
    IsInRangeValidatorDirective.prototype.ngOnChanges = function (changes) {
        var minValue = this.minValue;
        var maxValue = this.maxValue;
        var changed = false;
        if (changes.minValue) {
            minValue = changes.minValue.currentValue;
            changed = changes.minValue.isFirstChange() ? false : true;
        }
        if (changes.maxValue) {
            maxValue = changes.maxValue.currentValue;
            changed = changes.maxValue.isFirstChange() ? false : true;
        }
        if (changed) {
            this.validator = UniversalValidators.isInRange(minValue, maxValue);
            this.onChange();
        }
    };
    IsInRangeValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    IsInRangeValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this.onChange = fn;
    };
    var IsInRangeValidatorDirective_1;
    tslib_1.__decorate([
        Input()
    ], IsInRangeValidatorDirective.prototype, "minValue", void 0);
    tslib_1.__decorate([
        Input()
    ], IsInRangeValidatorDirective.prototype, "maxValue", void 0);
    IsInRangeValidatorDirective = IsInRangeValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "[isInRange][formControlName],[isInRange][formControl],[isInRange][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return IsInRangeValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], IsInRangeValidatorDirective);
    return IsInRangeValidatorDirective;
}());
export { IsInRangeValidatorDirective };
var MaxValidatorDirective = /** @class */ (function () {
    function MaxValidatorDirective() {
    }
    MaxValidatorDirective_1 = MaxValidatorDirective;
    MaxValidatorDirective.prototype.ngOnInit = function () {
        this.validator = UniversalValidators.max(this.max);
    };
    MaxValidatorDirective.prototype.ngOnChanges = function (changes) {
        if (changes.max && !changes.max.isFirstChange()) {
            this.validator = UniversalValidators.max(changes.max.currentValue);
            this.onChange();
        }
    };
    MaxValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    MaxValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this.onChange = fn;
    };
    var MaxValidatorDirective_1;
    tslib_1.__decorate([
        Input()
    ], MaxValidatorDirective.prototype, "max", void 0);
    MaxValidatorDirective = MaxValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "input[type=text][max][formControlName],input[type=text][max][formControl],input[type=text][max][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return MaxValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], MaxValidatorDirective);
    return MaxValidatorDirective;
}());
export { MaxValidatorDirective };
var MinValidatorDirective = /** @class */ (function () {
    function MinValidatorDirective() {
    }
    MinValidatorDirective_1 = MinValidatorDirective;
    MinValidatorDirective.prototype.ngOnInit = function () {
        this.validator = UniversalValidators.min(this.min);
    };
    MinValidatorDirective.prototype.ngOnChanges = function (changes) {
        if (changes.min && !changes.min.isFirstChange()) {
            this.validator = UniversalValidators.min(changes.min.currentValue);
            this.onChange();
        }
    };
    MinValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    MinValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this.onChange = fn;
    };
    var MinValidatorDirective_1;
    tslib_1.__decorate([
        Input()
    ], MinValidatorDirective.prototype, "min", void 0);
    MinValidatorDirective = MinValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "input[type=text][min][formControlName],input[type=text][min][formControl],input[type=text][min][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return MinValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], MinValidatorDirective);
    return MinValidatorDirective;
}());
export { MinValidatorDirective };
var MinDateValidatorDirective = /** @class */ (function () {
    function MinDateValidatorDirective() {
    }
    MinDateValidatorDirective_1 = MinDateValidatorDirective;
    MinDateValidatorDirective.prototype.ngOnInit = function () {
        this.validator = UniversalValidators.minDate(new Date(this.minDate));
    };
    MinDateValidatorDirective.prototype.ngOnChanges = function (changes) {
        if (changes.minDate && !changes.minDate.isFirstChange()) {
            this.validator = UniversalValidators.minDate(changes.min.currentValue);
            this.onChange();
        }
    };
    MinDateValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    MinDateValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this.onChange = fn;
    };
    var MinDateValidatorDirective_1;
    tslib_1.__decorate([
        Input()
    ], MinDateValidatorDirective.prototype, "minDate", void 0);
    MinDateValidatorDirective = MinDateValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "input[type=text][minDate][formControlName],input[type=text][minDate][formControl],input[type=text][minDate][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return MinDateValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], MinDateValidatorDirective);
    return MinDateValidatorDirective;
}());
export { MinDateValidatorDirective };
var MaxDateValidatorDirective = /** @class */ (function () {
    function MaxDateValidatorDirective() {
    }
    MaxDateValidatorDirective_1 = MaxDateValidatorDirective;
    MaxDateValidatorDirective.prototype.ngOnInit = function () {
        this.validator = UniversalValidators.maxDate(new Date(this.maxDate));
    };
    MaxDateValidatorDirective.prototype.ngOnChanges = function (changes) {
        if (changes.maxDate && !changes.maxDate.isFirstChange()) {
            this.validator = UniversalValidators.maxDate(changes.min.currentValue);
            this.onChange();
        }
    };
    MaxDateValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    MaxDateValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this.onChange = fn;
    };
    var MaxDateValidatorDirective_1;
    tslib_1.__decorate([
        Input()
    ], MaxDateValidatorDirective.prototype, "maxDate", void 0);
    MaxDateValidatorDirective = MaxDateValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "input[type=text][maxDate][formControlName],input[type=text][maxDate][formControl],input[type=text][maxDate][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return MaxDateValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], MaxDateValidatorDirective);
    return MaxDateValidatorDirective;
}());
export { MaxDateValidatorDirective };
//# sourceMappingURL=data:application/json;base64,