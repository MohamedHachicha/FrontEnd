import * as tslib_1 from "tslib";
import { EmptyStringValidatorDirective, IsInRangeValidatorDirective, IsNumberValidatorDirective, MaxDateValidatorDirective, MaxValidatorDirective, MinDateValidatorDirective, MinValidatorDirective, WhiteSpaceValidatorDirective, } from "./universal/universal.directive";
import { NgModule } from "@angular/core";
import { CreditCardValidatorDirective } from "./creditcard/creditcard.directive";
import { EmailValidatorDirective, EmailSuggestValidatorDirective } from "./email/email.directive";
import { PasswordValidatorDirective } from "./password/password.directive";
import { EqualToDirective } from "./equal-to/equal-to.directive";
let ValidatorsModule = class ValidatorsModule {
};
ValidatorsModule = tslib_1.__decorate([
    NgModule({
        declarations: [
            CreditCardValidatorDirective,
            EmailValidatorDirective,
            EmailSuggestValidatorDirective,
            PasswordValidatorDirective,
            IsInRangeValidatorDirective,
            IsNumberValidatorDirective,
            MaxValidatorDirective,
            MinValidatorDirective,
            MinDateValidatorDirective,
            MaxDateValidatorDirective,
            WhiteSpaceValidatorDirective,
            EmptyStringValidatorDirective,
            EqualToDirective,
        ],
        exports: [
            CreditCardValidatorDirective,
            EmailValidatorDirective,
            EmailSuggestValidatorDirective,
            PasswordValidatorDirective,
            IsInRangeValidatorDirective,
            IsNumberValidatorDirective,
            MaxValidatorDirective,
            MinValidatorDirective,
            MinDateValidatorDirective,
            MaxDateValidatorDirective,
            WhiteSpaceValidatorDirective,
            EmptyStringValidatorDirective,
            EqualToDirective,
        ],
    })
], ValidatorsModule);
export { ValidatorsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdmFsaWRhdG9ycy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCw2QkFBNkIsRUFDN0IsMkJBQTJCLEVBQzNCLDBCQUEwQixFQUMxQix5QkFBeUIsRUFDekIscUJBQXFCLEVBQ3JCLHlCQUF5QixFQUN6QixxQkFBcUIsRUFDckIsNEJBQTRCLEdBQzdCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNqRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsOEJBQThCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQWtDakUsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7Q0FBRyxDQUFBO0FBQW5CLGdCQUFnQjtJQWhDNUIsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFO1lBQ1osNEJBQTRCO1lBQzVCLHVCQUF1QjtZQUN2Qiw4QkFBOEI7WUFDOUIsMEJBQTBCO1lBQzFCLDJCQUEyQjtZQUMzQiwwQkFBMEI7WUFDMUIscUJBQXFCO1lBQ3JCLHFCQUFxQjtZQUNyQix5QkFBeUI7WUFDekIseUJBQXlCO1lBQ3pCLDRCQUE0QjtZQUM1Qiw2QkFBNkI7WUFDN0IsZ0JBQWdCO1NBQ2pCO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsNEJBQTRCO1lBQzVCLHVCQUF1QjtZQUN2Qiw4QkFBOEI7WUFDOUIsMEJBQTBCO1lBQzFCLDJCQUEyQjtZQUMzQiwwQkFBMEI7WUFDMUIscUJBQXFCO1lBQ3JCLHFCQUFxQjtZQUNyQix5QkFBeUI7WUFDekIseUJBQXlCO1lBQ3pCLDRCQUE0QjtZQUM1Qiw2QkFBNkI7WUFDN0IsZ0JBQWdCO1NBQ2pCO0tBQ0YsQ0FBQztHQUNXLGdCQUFnQixDQUFHO1NBQW5CLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEVtcHR5U3RyaW5nVmFsaWRhdG9yRGlyZWN0aXZlLFxuICBJc0luUmFuZ2VWYWxpZGF0b3JEaXJlY3RpdmUsXG4gIElzTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlLFxuICBNYXhEYXRlVmFsaWRhdG9yRGlyZWN0aXZlLFxuICBNYXhWYWxpZGF0b3JEaXJlY3RpdmUsXG4gIE1pbkRhdGVWYWxpZGF0b3JEaXJlY3RpdmUsXG4gIE1pblZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgV2hpdGVTcGFjZVZhbGlkYXRvckRpcmVjdGl2ZSxcbn0gZnJvbSBcIi4vdW5pdmVyc2FsL3VuaXZlcnNhbC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgQ3JlZGl0Q2FyZFZhbGlkYXRvckRpcmVjdGl2ZSB9IGZyb20gXCIuL2NyZWRpdGNhcmQvY3JlZGl0Y2FyZC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IEVtYWlsVmFsaWRhdG9yRGlyZWN0aXZlLCBFbWFpbFN1Z2dlc3RWYWxpZGF0b3JEaXJlY3RpdmUgfSBmcm9tIFwiLi9lbWFpbC9lbWFpbC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IFBhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlIH0gZnJvbSBcIi4vcGFzc3dvcmQvcGFzc3dvcmQuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBFcXVhbFRvRGlyZWN0aXZlIH0gZnJvbSBcIi4vZXF1YWwtdG8vZXF1YWwtdG8uZGlyZWN0aXZlXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIENyZWRpdENhcmRWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1haWxWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1haWxTdWdnZXN0VmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIFBhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIElzSW5SYW5nZVZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBJc051bWJlclZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBNYXhWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgTWluVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIE1pbkRhdGVWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgTWF4RGF0ZVZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBXaGl0ZVNwYWNlVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIEVtcHR5U3RyaW5nVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIEVxdWFsVG9EaXJlY3RpdmUsXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBDcmVkaXRDYXJkVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIEVtYWlsVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIEVtYWlsU3VnZ2VzdFZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBQYXNzd29yZFZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBJc0luUmFuZ2VWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgSXNOdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgTWF4VmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIE1pblZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBNaW5EYXRlVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIE1heERhdGVWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgV2hpdGVTcGFjZVZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBFbXB0eVN0cmluZ1ZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBFcXVhbFRvRGlyZWN0aXZlLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBWYWxpZGF0b3JzTW9kdWxlIHt9XG4iXX0=