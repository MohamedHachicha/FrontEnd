var WhiteSpaceValidatorDirective_1, EmptyStringValidatorDirective_1, IsNumberValidatorDirective_1, IsInRangeValidatorDirective_1, MaxValidatorDirective_1, MinValidatorDirective_1, MinDateValidatorDirective_1, MaxDateValidatorDirective_1;
import * as tslib_1 from "tslib";
import { Directive, forwardRef, Input } from "@angular/core";
import { NG_VALIDATORS } from "@angular/forms";
import { UniversalValidators } from "./universal-validators";
let WhiteSpaceValidatorDirective = WhiteSpaceValidatorDirective_1 = class WhiteSpaceValidatorDirective {
    ngOnInit() {
        this.validator = UniversalValidators.noWhitespace;
    }
    validate(c) {
        return this.validator(c);
    }
};
WhiteSpaceValidatorDirective = WhiteSpaceValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "[noWhitespace][formControlName],[noWhitespace][formControl],[noWhitespace][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => WhiteSpaceValidatorDirective_1),
                multi: true,
            },
        ],
    })
], WhiteSpaceValidatorDirective);
export { WhiteSpaceValidatorDirective };
let EmptyStringValidatorDirective = EmptyStringValidatorDirective_1 = class EmptyStringValidatorDirective {
    ngOnInit() {
        this.validator = UniversalValidators.noEmptyString;
    }
    validate(c) {
        return this.validator(c);
    }
};
EmptyStringValidatorDirective = EmptyStringValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "[noEmptyString][formControlName],[noEmptyString][formControl],[noEmptyString][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => EmptyStringValidatorDirective_1),
                multi: true,
            },
        ],
    })
], EmptyStringValidatorDirective);
export { EmptyStringValidatorDirective };
let IsNumberValidatorDirective = IsNumberValidatorDirective_1 = class IsNumberValidatorDirective {
    ngOnInit() {
        this.validator = UniversalValidators.isNumber;
    }
    validate(c) {
        return this.validator(c);
    }
};
IsNumberValidatorDirective = IsNumberValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => IsNumberValidatorDirective_1),
                multi: true,
            },
        ],
    })
], IsNumberValidatorDirective);
export { IsNumberValidatorDirective };
let IsInRangeValidatorDirective = IsInRangeValidatorDirective_1 = class IsInRangeValidatorDirective {
    ngOnInit() {
        this.validator = UniversalValidators.isInRange(this.minValue, this.maxValue);
    }
    ngOnChanges(changes) {
        let minValue = this.minValue;
        let maxValue = this.maxValue;
        let changed = false;
        if (changes.minValue) {
            minValue = changes.minValue.currentValue;
            changed = changes.minValue.isFirstChange() ? false : true;
        }
        if (changes.maxValue) {
            maxValue = changes.maxValue.currentValue;
            changed = changes.maxValue.isFirstChange() ? false : true;
        }
        if (changed) {
            this.validator = UniversalValidators.isInRange(minValue, maxValue);
            this.onChange();
        }
    }
    validate(c) {
        return this.validator(c);
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
};
tslib_1.__decorate([
    Input()
], IsInRangeValidatorDirective.prototype, "minValue", void 0);
tslib_1.__decorate([
    Input()
], IsInRangeValidatorDirective.prototype, "maxValue", void 0);
IsInRangeValidatorDirective = IsInRangeValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "[isInRange][formControlName],[isInRange][formControl],[isInRange][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => IsInRangeValidatorDirective_1),
                multi: true,
            },
        ],
    })
], IsInRangeValidatorDirective);
export { IsInRangeValidatorDirective };
let MaxValidatorDirective = MaxValidatorDirective_1 = class MaxValidatorDirective {
    ngOnInit() {
        this.validator = UniversalValidators.max(this.max);
    }
    ngOnChanges(changes) {
        if (changes.max && !changes.max.isFirstChange()) {
            this.validator = UniversalValidators.max(changes.max.currentValue);
            this.onChange();
        }
    }
    validate(c) {
        return this.validator(c);
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
};
tslib_1.__decorate([
    Input()
], MaxValidatorDirective.prototype, "max", void 0);
MaxValidatorDirective = MaxValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "input[type=text][max][formControlName],input[type=text][max][formControl],input[type=text][max][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => MaxValidatorDirective_1),
                multi: true,
            },
        ],
    })
], MaxValidatorDirective);
export { MaxValidatorDirective };
let MinValidatorDirective = MinValidatorDirective_1 = class MinValidatorDirective {
    ngOnInit() {
        this.validator = UniversalValidators.min(this.min);
    }
    ngOnChanges(changes) {
        if (changes.min && !changes.min.isFirstChange()) {
            this.validator = UniversalValidators.min(changes.min.currentValue);
            this.onChange();
        }
    }
    validate(c) {
        return this.validator(c);
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
};
tslib_1.__decorate([
    Input()
], MinValidatorDirective.prototype, "min", void 0);
MinValidatorDirective = MinValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "input[type=text][min][formControlName],input[type=text][min][formControl],input[type=text][min][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => MinValidatorDirective_1),
                multi: true,
            },
        ],
    })
], MinValidatorDirective);
export { MinValidatorDirective };
let MinDateValidatorDirective = MinDateValidatorDirective_1 = class MinDateValidatorDirective {
    ngOnInit() {
        this.validator = UniversalValidators.minDate(new Date(this.minDate));
    }
    ngOnChanges(changes) {
        if (changes.minDate && !changes.minDate.isFirstChange()) {
            this.validator = UniversalValidators.minDate(changes.min.currentValue);
            this.onChange();
        }
    }
    validate(c) {
        return this.validator(c);
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
};
tslib_1.__decorate([
    Input()
], MinDateValidatorDirective.prototype, "minDate", void 0);
MinDateValidatorDirective = MinDateValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "input[type=text][minDate][formControlName],input[type=text][minDate][formControl],input[type=text][minDate][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => MinDateValidatorDirective_1),
                multi: true,
            },
        ],
    })
], MinDateValidatorDirective);
export { MinDateValidatorDirective };
let MaxDateValidatorDirective = MaxDateValidatorDirective_1 = class MaxDateValidatorDirective {
    ngOnInit() {
        this.validator = UniversalValidators.maxDate(new Date(this.maxDate));
    }
    ngOnChanges(changes) {
        if (changes.maxDate && !changes.maxDate.isFirstChange()) {
            this.validator = UniversalValidators.maxDate(changes.min.currentValue);
            this.onChange();
        }
    }
    validate(c) {
        return this.validator(c);
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
};
tslib_1.__decorate([
    Input()
], MaxDateValidatorDirective.prototype, "maxDate", void 0);
MaxDateValidatorDirective = MaxDateValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "input[type=text][maxDate][formControlName],input[type=text][maxDate][formControl],input[type=text][maxDate][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => MaxDateValidatorDirective_1),
                multi: true,
            },
        ],
    })
], MaxDateValidatorDirective);
export { MaxDateValidatorDirective };
//# sourceMappingURL=data:application/json;base64,