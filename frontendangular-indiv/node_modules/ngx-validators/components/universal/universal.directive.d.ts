import { OnInit, OnChanges, SimpleChanges } from "@angular/core";
import { AbstractControl, Validator, ValidationErrors } from "@angular/forms";
import * as ɵngcc0 from '@angular/core';
export declare class WhiteSpaceValidatorDirective implements Validator, OnInit {
    private validator;
    ngOnInit(): void;
    validate(c: AbstractControl): ValidationErrors;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<WhiteSpaceValidatorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<WhiteSpaceValidatorDirective, "[noWhitespace][formControlName],[noWhitespace][formControl],[noWhitespace][ngModel]", never, {}, {}, never>;
}
export declare class EmptyStringValidatorDirective implements Validator, OnInit {
    private validator;
    ngOnInit(): void;
    validate(c: AbstractControl): ValidationErrors;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<EmptyStringValidatorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<EmptyStringValidatorDirective, "[noEmptyString][formControlName],[noEmptyString][formControl],[noEmptyString][ngModel]", never, {}, {}, never>;
}
export declare class IsNumberValidatorDirective implements Validator, OnInit {
    private validator;
    ngOnInit(): void;
    validate(c: AbstractControl): ValidationErrors;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsNumberValidatorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsNumberValidatorDirective, "[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]", never, {}, {}, never>;
}
export declare class IsInRangeValidatorDirective implements Validator, OnInit, OnChanges {
    minValue: number;
    maxValue: number;
    private validator;
    private onChange;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    validate(c: AbstractControl): ValidationErrors;
    registerOnValidatorChange(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsInRangeValidatorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsInRangeValidatorDirective, "[isInRange][formControlName],[isInRange][formControl],[isInRange][ngModel]", never, { "minValue": "minValue"; "maxValue": "maxValue"; }, {}, never>;
}
export declare class MaxValidatorDirective implements Validator, OnInit, OnChanges {
    max: number;
    private validator;
    private onChange;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    validate(c: AbstractControl): ValidationErrors;
    registerOnValidatorChange(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MaxValidatorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MaxValidatorDirective, "input[type=text][max][formControlName],input[type=text][max][formControl],input[type=text][max][ngModel]", never, { "max": "max"; }, {}, never>;
}
export declare class MinValidatorDirective implements Validator, OnInit, OnChanges {
    min: number;
    private validator;
    private onChange;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    validate(c: AbstractControl): ValidationErrors;
    registerOnValidatorChange(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MinValidatorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MinValidatorDirective, "input[type=text][min][formControlName],input[type=text][min][formControl],input[type=text][min][ngModel]", never, { "min": "min"; }, {}, never>;
}
export declare class MinDateValidatorDirective implements Validator, OnInit, OnChanges {
    minDate: string;
    private validator;
    private onChange;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    validate(c: AbstractControl): ValidationErrors;
    registerOnValidatorChange(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MinDateValidatorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MinDateValidatorDirective, "input[type=text][minDate][formControlName],input[type=text][minDate][formControl],input[type=text][minDate][ngModel]", never, { "minDate": "minDate"; }, {}, never>;
}
export declare class MaxDateValidatorDirective implements Validator, OnInit, OnChanges {
    maxDate: string;
    private validator;
    private onChange;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    validate(c: AbstractControl): ValidationErrors;
    registerOnValidatorChange(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MaxDateValidatorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MaxDateValidatorDirective, "input[type=text][maxDate][formControlName],input[type=text][maxDate][formControl],input[type=text][maxDate][ngModel]", never, { "maxDate": "maxDate"; }, {}, never>;
}

//# sourceMappingURL=universal.directive.d.ts.map