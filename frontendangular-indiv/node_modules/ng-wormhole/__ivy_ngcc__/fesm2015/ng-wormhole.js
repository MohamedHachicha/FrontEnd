import { Directive, Input, ViewContainerRef, TemplateRef, Inject, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} target
 * @param {?} node
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
function appendReducer(target, node) {
    target.appendChild(node);
    return target;
}
class NgWormholeDirective {
    /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     * @param {?} document
     */
    constructor(viewContainerRef, templateRef, document) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.ngWormholeRenderInPlace = false;
        this.initialized = false;
        this.document = document;
    }
    /**
     * @return {?}
     */
    get destinationElement() {
        if (this.ngWormholeRenderInPlace) {
            return (this.viewContainerRef.element &&
                this.viewContainerRef.element.nativeElement);
        }
        if (!this.ngWormhole) {
            return null;
        }
        return typeof this.ngWormhole === 'string'
            ? this.document.querySelector(this.ngWormhole)
            : this.ngWormhole;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.appendToDestination();
        this.initialized = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initialized) {
            this.appendToDestination();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.embeddedViewRef != null) {
            this.embeddedViewRef.destroy();
        }
    }
    /**
     * @return {?}
     */
    appendToDestination() {
        /** @type {?} */
        let startingActiveElement = this.getActiveElement();
        /** @type {?} */
        let destinationElement = this.destinationElement;
        if (destinationElement == null) {
            return;
        }
        /** @type {?} */
        let content = this.embeddedViewRef.rootNodes.reduce(appendReducer, this.document.createDocumentFragment());
        if (destinationElement.nodeType === Node.COMMENT_NODE) {
            destinationElement.parentNode.insertBefore(content, destinationElement.nextSibling);
        }
        else {
            destinationElement.appendChild(content);
        }
        /** @type {?} */
        let resultingActiveElement = this.getActiveElement();
        if (startingActiveElement != null &&
            resultingActiveElement !== startingActiveElement) {
            (/** @type {?} */ (startingActiveElement)).focus();
        }
    }
    /**
     * @return {?}
     */
    getActiveElement() {
        return this.document.activeElement;
    }
}
NgWormholeDirective.ɵfac = function NgWormholeDirective_Factory(t) { return new (t || NgWormholeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
NgWormholeDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NgWormholeDirective, selectors: [["", "ngWormhole", ""]], inputs: { ngWormholeRenderInPlace: "ngWormholeRenderInPlace", ngWormhole: "ngWormhole" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
NgWormholeDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
NgWormholeDirective.propDecorators = {
    ngWormholeRenderInPlace: [{ type: Input }],
    ngWormhole: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgWormholeDirective, [{
        type: Directive,
        args: [{
                selector: '[ngWormhole]' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { ngWormholeRenderInPlace: [{
            type: Input
        }], ngWormhole: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgWormholeModule {
}
NgWormholeModule.ɵfac = function NgWormholeModule_Factory(t) { return new (t || NgWormholeModule)(); };
NgWormholeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgWormholeModule });
NgWormholeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgWormholeModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [NgWormholeDirective],
                exports: [NgWormholeDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgWormholeModule, { declarations: [NgWormholeDirective], exports: [NgWormholeDirective] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgWormholeDirective, NgWormholeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,