{"version":3,"file":"angular-dropdown.directive.d.ts","sources":["angular-dropdown.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable, BehaviorSubject } from 'rxjs';\nimport { OnChanges, SimpleChanges } from '@angular/core';\nimport { AngularDropdownControlDirective } from './angular-dropdown-control.directive';\nexport interface AngularDropdownPositionChanges {\n    vPosition: 'above' | 'below';\n    hPosition: 'right' | 'center' | 'left';\n}\nexport declare type VerticalPosition = 'auto' | 'above' | 'below';\nexport declare type HorizontalPosition = 'auto' | 'right' | 'center' | 'left';\nexport interface DropdownContentPosition {\n    readonly hPosition: HorizontalPosition | null;\n    readonly vPosition: VerticalPosition | null;\n    readonly top: string | null;\n    readonly left: string | null;\n    readonly bottom: string | null;\n    readonly right: string | null;\n}\nexport declare class AngularDropdownDirective implements OnChanges {\n    id?: string;\n    renderInPlace: boolean;\n    control: AngularDropdownControlDirective | null;\n    previousVerticalPosition: VerticalPosition | null;\n    previousHorizontalPosition: HorizontalPosition | null;\n    matchTriggerWidth: boolean;\n    private _isOpen$;\n    isOpen$: Observable<boolean>;\n    position$: BehaviorSubject<Readonly<DropdownContentPosition>>;\n    readonly dropdownId: string;\n    calculatePosition: Function;\n    calculateInPlacePosition: Function;\n    disabled: boolean;\n    beforeOpen: (() => boolean | Observable<boolean>) | null;\n    beforeClose: (() => boolean | Observable<boolean>) | null;\n    verticalPosition: VerticalPosition;\n    horizontalPosition: HorizontalPosition;\n    onOpen: Observable<boolean>;\n    onClose: Observable<boolean>;\n    readonly triggerElement: HTMLElement | null;\n    readonly dropdownElement: HTMLElement | null;\n    private dropdownContent?;\n    private uniqueId;\n    private width;\n    private document;\n    constructor(document: any, id?: string);\n    ngOnChanges({ disabled }: SimpleChanges): void;\n    open(): void;\n    close(skipFocus?: boolean): void;\n    toggle(): void;\n    disable(): void;\n    enable(): void;\n    reposition: () => AngularDropdownPositionChanges | null;\n    private applyReposition;\n    private initializeId;\n    private createDefaultWormholeOutlet;\n}\n"]}